---WHAT I RECALLED OFF THE TOP OF MY HEAD FROM LESSON ON 03/14/20---
    What is a node module?
        - a node module is a collection of different sets of data that we can use as a base for creating something. For example, if you want to create a sliding gallery there will most likely be a node muodule

    Do we want to download the entire node module?
        -With node muodules we only want to grab the ones that we need so that it is not only easier to navigate but if we were to push the file to github for example, there is not a this giant folder of millions of folders. To do this, we move on to package.json

    What is the role of package.json in React?
        -The role of package.json is to communicate which node modules we need for our react application so that we do not end up downloading the entire node module database. This is done by listing what "dependencies" are needed within the package.json file

    What is the public folder?
        -contains the html of the react application(separate from the html written in jsx in the component files)

    What is the src file?
        -The src file is folder is what contains all of the different parts of a react application. This includes the index.js file, the App.js file and then the component files.

    What is the index.js file?
        -the index.js file is the brain of the react application. It is the starting file to create the react application. It does so by importing React from 'react' and importing Reactdom from "reactdom" to grab the necessary node module to have the react application work. It also import from our App.js file.    

    What is the App.js file?
        -The App.js file is the "master" component files that connects to the index.js that imports the data from the other component files which then the index.js files get access to since it imports from the App.js file. I guess this can be seen as the nervous system of the react application, connecting the body and limb to the brain so that information can be connected and sent to the proper part and to execute commands correctly.


    What are components?
        -components are the limbs of a react application. They are different files that each contains code for one specific part of the application. For example if there is a feature for a pop up chat like with facebook, there will probably be a component for it.

    What is the point of a component versus just writing all the code in one file?
        -Having different components versus having one giant file will make it easier to not only navigate, but to also edit the code for that specific component of the application with minimal risk of affecting other parts of the application.

    How do we connect components?
        -We connect components by using the import and export function and having it imported into App.js

    How do we label component files?
        -We label them with a capital letter in the beginner. Examples would be App.js(the A is capital) or User.js(the U is capital);

    What language do we use in React?
        -JSX

    What is the JSX?
        -JSX is the combination of javascript and html so that it can be used together in the same file

    How do you use javascript within and html tag and what is the point?
        -<div>{'insert javascript here'</div>
        The point is to make the html dynamic, similar to the reason we use a template string    
    What is an API?
        -An API is the door we use to access different buckets of code. An example would be when we use eventlisteners with javascript. It always starts off with document.addEventListner, and the document is an API that we are using the access the code within it.

    What does API stand for?
        -Application programming interface

    What is a function component?
        - A function component is just a function that is used within a component file and is then exported into the App.js file.

    What is a class based component?
        A class  based component, from my understanding, is the older way of writing functions within a component file (pre-ES6)

    What are the two kinds of exports and how do they differ?
        -Default export 
            -Default export will export the entire block of chain that is contained within it  
            -ex:
                const person1 = () => {
                    firstName: 'victor',
                    lastName: 'nguyen";
                }
                export default person
            -With the following example, all App.js has to do is import person from "the component file name" and it will have access to the funtion component person1

        -Exporting named values(NEED TO STUDY UP) 
            -will export only the parameter called upon unlike default export where it will export everything before it



    What is the public folder?
        -contains the html of the react application(separate from the html written in jsx in the component files)
---What is Babel and why is it important for react?
    -a free ad opensource javascript transcompiler
    - It's important because the prefered syntax for React is JSX and babel can take that and turn it into a readable javascript
----MAIN CONCEPTS  ---
    Introducing JSX 
        How does JSX prevent injection attacks
            - because it reads texts as texts, so HTML in user input is treated as text not HTML. This means the code can't be change externally 
    Rendering Elements
        Rendinger an Element into the DOM
            What is a "root" DOM node?
                - it's the div in the html file within the public folder. It's called root because it is being used and modified by the ReactDOM
                - ex: <div id=root></div>
        Updating the Rendered ELEMENTS  
            Once you create an element, can you change the children or atrributes and why?
                -You cannot change the element's children or attribute once its created
                -This is because the element represents the UI at a certain point in time
        React Updates
            What does react update and how?( need better explanation)
                -React only updates what is necessary
                -ReactDOM compares the element and its children to the previous one and only applies the DOM updates necessary to bring the DOM to the desired state(this means it compares and spits out the difference aka "Updating what is necessary") this way the entire UI does not get refreshed, only what is changing

---WHAT ARE PROPS--- 
    -Props is what is used to send data from the parent component to the child component and is used similar to html tags.
    -Similar to how we export and import to different component files, props allows us to speciy the data that we want to transfer over
    -The data that props send to their child component cannot change unless it is changed within the parent component. 
    -Props is simply a vehicle with the data as it's passenger leaving it's home(the parent) to a new city(the child)
    -For example 
        PARENT COMPONENT 
            const parent () => <div><child category='test'/></div>

        CHILD COMPONENT 
             const child () => <div><h1>hi this is a {props.category}</h1></div>
    here we are passing the props named "category" containing data which is a string called 'test' into the child component. 

---WHAT ARE STATES---
    -States are objects used within a class component where the data contained in the state is dynamic (it changes)
---WHATS THE DIFFERENCE BETWEEN PROPS AND STATES---
    -PROPS:
        -used in functional components & class components
        -send data contained within the  parent component to the child component
        -data that is sent cannot be changed by the child component
        -EX:below the child component is gaining access to the data from the parent component. specifically the data within the props labeled name. This happened because we calleed the child component and then gave it the props name with the data being {bob}
            PARENT COMPONENT
                const parent (props) => {
                    const bob = 'bob';
                    return(
                    <div>
                        <child name={bob}/>
                    </div>
                    )
                }
                export default parent;
            CHILD COMPONENT
            const child () => {
                return(
                    <div>
                        <h1>Hello, my name is {props.name}</h1>
                    </div>
                );
            };
            export default child;
    -STATES:
        -used in class components
        -deals with the data within the class component itself rather than fetching data externally from a parent function
        -used for data that can change within the UI
        EX: Here we returning a class component where whenever the button gets clicked the counter within the state object increases by 1

            class App extends React.Component{
                state = {
                    counter: 0;
                };

                addOne = () => this.setState({counter:this.state.counter +1});
                
                render(){
                    return(
                        <button onClick={this.addOne}>Click to increase by 1</button>
                    )
                }   
            };

--WHAT ARE CLASS COMPONENTS--- 
    class component's are "smart" components and are have the ability to use States

---WHAT THE DIFFERENCE BETWEEN A FUNCTIONAL COMPONENT AND A CLASS COMPONENT---
    -A class component can use States
    -A functional component can be seen as the ES6 version and cannot use states, however they can use hooks which is their version of states

---WHAT ARE THE THREE STAGES OF THE REACT LIFECYCLE---
    -render( when the component is created)
    -precommit(when it reads the change)

    -commit(when the change is made and the component is updated)
---WHAT ARE THE THREE LIFECYCLE METHOD---
    -lifecycleWillMount
    -lifecycleDidMount
    -lifecycleUnmount

---WHAT IS IT MAINLY USED FOR IN DAY TO DAY PROGRAMMING---
    -finding a good spot for fetching data? can't really see this being used in an actual project or work setting

